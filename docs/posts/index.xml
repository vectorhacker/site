<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Victor&#39;s Personal Blog</title>
        <link>https://victoramartinez.com/posts/</link>
        <description>Recent content in Posts on Victor&#39;s Personal Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Victor A. Mart√≠nez Santiago</copyright>
        <lastBuildDate>Fri, 23 Oct 2020 03:12:35 -0400</lastBuildDate>
        <atom:link href="https://victoramartinez.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Value Objects in Go</title>
            <link>https://victoramartinez.com/posts/value-objects-in-go-and-other-domain-driven-design-stuff/</link>
            <pubDate>Fri, 23 Oct 2020 03:12:35 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/value-objects-in-go-and-other-domain-driven-design-stuff/</guid>
            <description>Recently I&amp;rsquo;ve been thinking a lot about how to apply some DDD principles in Go in idiomatic and simple ways, and I&amp;rsquo;ve come accross a few patterns I&amp;rsquo;d like to share. Mainly we&amp;rsquo;ll be talking about how to apply the concept of Value Objects in Go in two ways. These are examples of how I apply them in my projects and actually use them so these are not just toy examples.</description>
            <content type="html"><![CDATA[<p>Recently I&rsquo;ve been thinking a lot about how to apply some DDD principles in Go in idiomatic and simple ways, and I&rsquo;ve come accross a few patterns I&rsquo;d like to share. Mainly we&rsquo;ll be talking about how to apply the concept of Value Objects in Go in two ways. These are examples of how I apply them in my projects and actually use them so these are not just toy examples.</p>
<h2 id="description">Description</h2>
<p>What is a value object first of all? It&rsquo;s an object that isn&rsquo;t quite an entity, but represents data that entities might use to complete their tasks. These are, as the name sugests, objects that contain the values of something useful to the domain being worked on. Examples of these objects include Social Security Numbers, Names of people, Locations, Dates, Routing information, etc. Two of the key characteristics for value is that they are 1. Immutable and 2. not strings.</p>
<h2 id="always-valid">Always Valid</h2>
<p>On top of what the concept of a value object, I&rsquo;d like to introduce the concept of an always valid value object. For value objects that represent something more complex or have strict validation rules, I often introduce the concept of them always being valid once created. That is to say if when constructing the object all the inputs are valid then the object is always in a valid state, otherwise it is never created. Put another way, you cannot create and use a value object that isn&rsquo;t valid.</p>
<h3 id="immutability">Immutability</h3>
<p>In order to be always valid, the object must be immutable. To do that in Go we use encapsulation by using package level hiding of fields.</p>
<h2 id="implementing-in-go">Implementing in Go</h2>
<p>The first and and most common kind of value object I create in Go is the simple type alias.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">ID</span> <span style="color:#66d9ef">string</span>
<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">City</span> <span style="color:#66d9ef">string</span>
</code></pre></div><p>If the object does not need complex validation and is just a simple field then it can be a type alias. Examples include things like ids, names that don&rsquo;t need to be checked if empty or not, and sometimes certain numbers. Some value objects are even simpler and come with the standard library, such as <code>time.Time</code> (tho admitidly internally internally it is more complex) and <code>bool</code>.</p>
<p>The second kind is one that I also use often, if not more often considering that it represents complex concepts, is the immutable field value object.</p>
<p>As an example, take a name field that need to be within a certain length of characters. We&rsquo;d implement them in Go like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">
<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">struct</span> {
  <span style="color:#75715e">// explicitly not public field
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>
}


<span style="color:#75715e">// NewName creates a new valid name object
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewName</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">Name</span>, <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">name</span>) &gt; <span style="color:#ae81ff">20</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>  {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Name</span>{}, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;invalid name, must be withn 20 charcters and non-empty&#34;</span>)
  }

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Name</span>{<span style="color:#a6e22e">name</span>: <span style="color:#a6e22e">name</span>}, <span style="color:#66d9ef">nil</span>
}

<span style="color:#75715e">// String implements the fmt.Stringer interface.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">n</span> <span style="color:#a6e22e">Name</span>) <span style="color:#a6e22e">String</span>() <span style="color:#66d9ef">string</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">name</span>
}

<span style="color:#75715e">// MarshalText used to serialize the object
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">n</span> <span style="color:#a6e22e">Name</span>) <span style="color:#a6e22e">MarshalText</span>() ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">return</span> []byte(<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">name</span>), <span style="color:#66d9ef">error</span>
}

<span style="color:#75715e">// UnmarshalText deserializes the object and returns an error if it&#39;s invalid. 
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Name</span>) <span style="color:#a6e22e">UnmarshalText</span>(<span style="color:#a6e22e">d</span> []<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">error</span> {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>
  <span style="color:#f92672">*</span><span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">NewName</span>(string(<span style="color:#a6e22e">d</span>))
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
}
</code></pre></div><p>A few things to note are that first, the only way to create the object is through the constructor; there&rsquo;s no other way, this way we gaurantee it&rsquo;s valid once created. If it&rsquo;s invalid to create it, we quickly return an error. The other thing to note is the implementation of the Stringer, TextMarshaller, and TextUnmarshaller interfaces; we do this so that it is easy to serialize and deserialize the objects.</p>
<p>With all those combined, we&rsquo;ve created our value objects and this has several advantages. Firstly when we use these objects we can rest assured that they are always valid. When created, say in our application layer we can quickly validate them. The aggregates need not worry about checking them nor should the application code, because they are never in an invalid state nor in any risk of being set to something invalid. The only check we should enforce in our aggregates and service layers is to check if one of the simpler types are empty when using them if that&rsquo;s something we need to have not happen, other than that it&rsquo;s simple to just assume they aren&rsquo;t empty.</p>
<p>We can of course create value object out of value objects, but that&rsquo;s another story.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In Go, value object are simple to implement and we can reap numerous rewards by applying the always valid concept. With that, I&rsquo;ll let you Go and may your objects always be valid.</p>
]]></content>
        </item>
        
        <item>
            <title>Stop The EARN IT Act</title>
            <link>https://victoramartinez.com/posts/stop-earn-it-act/</link>
            <pubDate>Wed, 25 Mar 2020 19:51:27 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/stop-earn-it-act/</guid>
            <description>A new threat to your freedom of speech and privacy has appeared. Senators Lindsey Graham (R-SC) and Richard Blumenthal (D-CT) have joined in introducing the EARN IT Act (S. 3398) bill in Congress. This act&amp;rsquo;s intention is hidden behind the guise of protecting children, but in reality seeks to potentially undermine the end-to-end encryption and security that exists for almost all internet communications, especially social messaging platforms like WhatsApp and other U.</description>
            <content type="html"><![CDATA[<p>A new threat to your freedom of speech and privacy has appeared. Senators Lindsey Graham (R-SC) and Richard Blumenthal (D-CT) have joined in introducing the <a href="https://www.congress.gov/bill/116th-congress/senate-bill/3398">EARN IT Act (S. 3398)</a> bill in Congress. This act&rsquo;s intention is hidden behind the guise of protecting children, but in reality seeks to potentially undermine the end-to-end encryption and security that exists for almost all internet communications, especially social messaging platforms like WhatsApp and other U.S. based messaging platforms. This would give dangerous men like Attorney General William Barr, who has expressed his opinions about encryption in the past, the legal authority to demand platforms decrypt communications. Don&rsquo;t be fooled, if this bill passes it will do little to actually protect children and instead put your data and private conversations at risk to online criminals and foreign governments. It is not just your private messages, but other means of communications that are at risk.</p>
<p>Various rights watch organizations have already denounced the bill, including the <a href="https://www.aclu.org/press-releases/aclu-afp-comment-earn-it-act">ACLU</a>.</p>
<blockquote>
<p>Tech companies have an extraordinary special safeguard against legal liability, but that unique protection comes with a responsibility. Companies that fail to comport with basic standards that protect children from exploitation have betrayed the public trust granted them by this special exemption. Online platforms' near-complete immunity from legal responsibility is a privilege ‚Äì they have to earn it ‚Äì and that&rsquo;s what our bipartisan bill requires.</p>
<p>&ndash; <!-- raw HTML omitted -->Blumenthal<!-- raw HTML omitted --></p>
</blockquote>
<p>Don&rsquo;t be fooled. Companies do not have to &ldquo;earn&rdquo; this immunity from what their users say and do on their platforms. What&rsquo;s more, it&rsquo;s a false premise. Online criminals will use other means to conduct their operations and believe me, they will. This only hurts the everyday citizen, who has done nothing wrong and has everything to lose.</p>
<blockquote>
<p>I‚Äôve got to say that putting our children at risk for what I believe are marginal privacy gains is something I really struggle to believe any of us want.</p>
<p>&ndash; <!-- raw HTML omitted -->James Brokenshire<!-- raw HTML omitted --></p>
</blockquote>
<p>Many security and privacy experts, as expected, disagree with that assessment. And, In my opinion, is a red flag to what the <a href="https://wired.com/story/earn-it-act-sneak-attack-on-encryption/">true intentions</a> of these politicians are. Either that or they are so completely ignorant of how all of this works that it is borderline irresponsible. We are not dealing with tech-savvy or even privacy-savvy individuals.</p>
<p>What&rsquo;s more, there are serious concerns that this act is <a href="https://cyberlaw.stanford.edu/blog/2020/03/earn-it-act-unconstitutional-fourth-amendment">unconstitutional</a> or at least it should be. Some say that it violates the first and fourth amendments of freedom of speech and the press, and the right to protect against unreasonable searches and seizures. How? By giving courts unprecedented access to previously encrypted information such as emails, private messages, and other documents.</p>
<p>The EARN It Act is a terrible idea. Not just because it won&rsquo;t do what it sets out to do, but because it undermines some of our basic freedoms and puts us all at risk for tyrannical government and cybercrime.</p>
<p>Help stop the EARN IT Act by <a href="https://act.eff.org/action/protect-our-speech-and-security-online-reject-the-graham-blumenthal-bill">contacting</a> your congressperson. Take action <a href="https://act.eff.org/action/protect-our-speech-and-security-online-reject-the-graham-blumenthal-bill">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Don&#39;t Use Frameworks</title>
            <link>https://victoramartinez.com/posts/dont-use-frameworks/</link>
            <pubDate>Tue, 24 Mar 2020 04:32:51 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/dont-use-frameworks/</guid>
            <description>Stop using frameworks for everything. Just stop. You don&amp;rsquo;t need a framework to write good code and deliver products. Don&amp;rsquo;t get me wrong, frameworks are useful, but they are all-consuming and hide the application. So if you shouldn&amp;rsquo;t depend on frameworks what should you do instead? Clean architecture. More specifically, there are some patterns you can follow to better architect your application and think about the structure of your application and remove the need for frameworks to express your application.</description>
            <content type="html"><![CDATA[<p>Stop using frameworks for everything. Just stop. You don&rsquo;t need a framework to write good code and deliver products. Don&rsquo;t get me wrong, frameworks are useful, but they are all-consuming and hide the application. So if you shouldn&rsquo;t depend on frameworks what should you do instead? Clean architecture. More specifically, there are some patterns you can follow to better architect your application and think about the structure of your application and remove the need for frameworks to express your application. The patterns I suggest you use are <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a>, <a href="https://www.infoq.com/minibooks/domain-driven-design-quickly/">Domain Driven Design</a>, and the <a href="https://www.youtube.com/watch?v=t86v3N4OshQ">SOLID</a> principles. Having a maintainable application is a matter of applying certain design principles and professionalism. In particular, applying <a href="https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html">TDD</a> or BDD and Domain Driven Design principles. Think about your application before you write a single line of code, design it, and test before you implement it.</p>
<p>What should you do about frameworks then? You can still use them, but only as plugins to your application. The use of a framework should be done by implementing internal interfaces for your applications' inner layers. Let me ask you this, how many times have you answered the question &ldquo;what is your architecture?&rdquo; with a phrase like &ldquo;We have a ruby on rails back-end persisted by postgres using an angular front-end?&rdquo; If you have, what you have just described is not an architecture, it is an application stack. And what is the application stack? The stack is a detail! No one cares what your application stack is, well no one who wants to get the work done cares what it is, and you shouldn&rsquo;t either. To be fair, I&rsquo;m not saying your technology stack isn&rsquo;t important at some level, I&rsquo;m saying that it&rsquo;s a detail. So what is an application&rsquo;s architecture then? It is the system of patterns that we use to carry out our application&rsquo;s functionality. Your architecture could be a simple CRUD system, or it might be a complex trading application that receives trade orders as incoming messages and delivers them by reserving credits and emitting order events depending on what state you&rsquo;re in. One thing is clear, your application&rsquo;s architecture is driven by the domain you&rsquo;re in and the complexity of the problem you are solving, a framework is not architecture.</p>
<p>So what does a frameworkless application look like? Here&rsquo;s an example in Go. Let us start by the business rules and implement entities. In this example we&rsquo;re using a Cargo shipping application. Notice that our entities are free of any database dependencies and external concerns.</p>
<h3 id="entities">Entities</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// TrackingID uniquely identifies a particular cargo.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">TrackingID</span> <span style="color:#66d9ef">string</span>

<span style="color:#75715e">// Cargo is the central class in the domain model.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Cargo</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">TrackingID</span>         <span style="color:#a6e22e">TrackingID</span>
	<span style="color:#a6e22e">Origin</span>             <span style="color:#a6e22e">UNLocode</span>
	<span style="color:#a6e22e">RouteSpecification</span> <span style="color:#a6e22e">RouteSpecification</span>
	<span style="color:#a6e22e">Itinerary</span>          <span style="color:#a6e22e">Itinerary</span>
	<span style="color:#a6e22e">Delivery</span>           <span style="color:#a6e22e">Delivery</span>
}

<span style="color:#75715e">// SpecifyNewRoute specifies a new route for this cargo.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>) <span style="color:#a6e22e">SpecifyNewRoute</span>(<span style="color:#a6e22e">rs</span> <span style="color:#a6e22e">RouteSpecification</span>) {
	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">RouteSpecification</span> = <span style="color:#a6e22e">rs</span>
	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Delivery</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Delivery</span>.<span style="color:#a6e22e">UpdateOnRouting</span>(<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">RouteSpecification</span>, <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Itinerary</span>)
}

<span style="color:#75715e">// AssignToRoute attaches a new itinerary to this cargo.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>) <span style="color:#a6e22e">AssignToRoute</span>(<span style="color:#a6e22e">itinerary</span> <span style="color:#a6e22e">Itinerary</span>) {
	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Itinerary</span> = <span style="color:#a6e22e">itinerary</span>
	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Delivery</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Delivery</span>.<span style="color:#a6e22e">UpdateOnRouting</span>(<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">RouteSpecification</span>, <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Itinerary</span>)
}

<span style="color:#75715e">// DeriveDeliveryProgress updates all aspects of the cargo aggregate status
</span><span style="color:#75715e">// based on the current route specification, itinerary and handling of the cargo.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>) <span style="color:#a6e22e">DeriveDeliveryProgress</span>(<span style="color:#a6e22e">history</span> <span style="color:#a6e22e">HandlingHistory</span>) {
	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Delivery</span> = <span style="color:#a6e22e">DeriveDeliveryFrom</span>(<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">RouteSpecification</span>, <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Itinerary</span>, <span style="color:#a6e22e">history</span>)
}

<span style="color:#75715e">// NewCargo creates a new, unrouted cargo.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewCargo</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">TrackingID</span>, <span style="color:#a6e22e">rs</span> <span style="color:#a6e22e">RouteSpecification</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span> {
	<span style="color:#a6e22e">itinerary</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Itinerary</span>{}
	<span style="color:#a6e22e">history</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">HandlingHistory</span>{make([]<span style="color:#a6e22e">HandlingEvent</span>, <span style="color:#ae81ff">0</span>)}

	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Cargo</span>{
		<span style="color:#a6e22e">TrackingID</span>:         <span style="color:#a6e22e">id</span>,
		<span style="color:#a6e22e">Origin</span>:             <span style="color:#a6e22e">rs</span>.<span style="color:#a6e22e">Origin</span>,
		<span style="color:#a6e22e">RouteSpecification</span>: <span style="color:#a6e22e">rs</span>,
		<span style="color:#a6e22e">Delivery</span>:           <span style="color:#a6e22e">DeriveDeliveryFrom</span>(<span style="color:#a6e22e">rs</span>, <span style="color:#a6e22e">itinerary</span>, <span style="color:#a6e22e">history</span>),
	}
}
</code></pre></div><p>The cargo object is an entity that is concerned with the carrying out of business rules related to shipping cargo, such as route assignments and delivery progress. We abstract the saving and retrieving of the cargo using the repository pattern and creating an interface for the repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// CargoRepository provides access a cargo store.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">CargoRepository</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">Store</span>(<span style="color:#a6e22e">cargo</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>) <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">TrackingID</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>, <span style="color:#66d9ef">error</span>)
	<span style="color:#a6e22e">FindAll</span>() []<span style="color:#f92672">*</span><span style="color:#a6e22e">Cargo</span>
}
</code></pre></div><p>This interface is not given a concrete implementation at this step, instead, it is used in our use case through dependency injection in which the specific implementation will be chosen later. This is where our persistence technology will plug into. Notice how our application needs to know nothing about how cargo is persisted to use it, it is a detail we&rsquo;ll sort out later.</p>
<h3 id="use-cases">Use cases</h3>
<p>Our use cases are implemented by exposing a common use case interface for that particular use case and a hidden implementation that gets chosen using the factory pattern. That is to say, our use cases are expressed as interfaces with methods (actions) we can take. Use cases import only the inner layers of our application, such as the entities, and get injected with the concrete implementation of other interfaces like repositories and other uses cases.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Service is the interface that provides booking methods.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Service</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#75715e">// BookNewCargo registers a new cargo in the tracking system, not yet
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// routed.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">BookNewCargo</span>(<span style="color:#a6e22e">origin</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>, <span style="color:#a6e22e">destination</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>, <span style="color:#a6e22e">deadline</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>) (<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#66d9ef">error</span>)

	<span style="color:#75715e">// LoadCargo returns a read model of a shipping.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">LoadCargo</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>) (<span style="color:#a6e22e">Cargo</span>, <span style="color:#66d9ef">error</span>)

	<span style="color:#75715e">// RequestPossibleRoutesForCargo requests a list of itineraries describing
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// possible routes for this shipping.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">RequestPossibleRoutesForCargo</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>) []<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Itinerary</span>

	<span style="color:#75715e">// AssignCargoToRoute assigns a cargo to the route specified by the
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// itinerary.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">AssignCargoToRoute</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#a6e22e">itinerary</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Itinerary</span>) <span style="color:#66d9ef">error</span>

	<span style="color:#75715e">// ChangeDestination changes the destination of a shipping.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ChangeDestination</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#a6e22e">destination</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>) <span style="color:#66d9ef">error</span>

	<span style="color:#75715e">// Cargos returns a list of all cargos that have been booked.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Cargos</span>() []<span style="color:#a6e22e">Cargo</span>

	<span style="color:#75715e">// Locations returns a list of registered locations.
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Locations</span>() []<span style="color:#a6e22e">Location</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">service</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">cargos</span>         <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">CargoRepository</span>
	<span style="color:#a6e22e">locations</span>      <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">LocationRepository</span>
	<span style="color:#a6e22e">handlingEvents</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">HandlingEventRepository</span>
	<span style="color:#a6e22e">routingService</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">RoutingService</span>
}

<span style="color:#75715e">// NewService creates a booking service with necessary dependencies.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewService</span>(<span style="color:#a6e22e">cargos</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">CargoRepository</span>, <span style="color:#a6e22e">locations</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">LocationRepository</span>, <span style="color:#a6e22e">events</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">HandlingEventRepository</span>, <span style="color:#a6e22e">rs</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">RoutingService</span>) <span style="color:#a6e22e">Service</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">service</span>{
		<span style="color:#a6e22e">cargos</span>:         <span style="color:#a6e22e">cargos</span>,
		<span style="color:#a6e22e">locations</span>:      <span style="color:#a6e22e">locations</span>,
		<span style="color:#a6e22e">handlingEvents</span>: <span style="color:#a6e22e">events</span>,
		<span style="color:#a6e22e">routingService</span>: <span style="color:#a6e22e">rs</span>,
	}
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">service</span>) <span style="color:#a6e22e">AssignCargoToRoute</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#a6e22e">itinerary</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Itinerary</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">||</span> len(<span style="color:#a6e22e">itinerary</span>.<span style="color:#a6e22e">Legs</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ErrInvalidArgument</span>
	}

	<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">cargos</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">id</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}

	<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">AssignToRoute</span>(<span style="color:#a6e22e">itinerary</span>)

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">cargos</span>.<span style="color:#a6e22e">Store</span>(<span style="color:#a6e22e">c</span>)
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">service</span>) <span style="color:#a6e22e">BookNewCargo</span>(<span style="color:#a6e22e">origin</span>, <span style="color:#a6e22e">destination</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>, <span style="color:#a6e22e">deadline</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>) (<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">origin</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">destination</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">deadline</span>.<span style="color:#a6e22e">IsZero</span>() {
		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">ErrInvalidArgument</span>
	}

	<span style="color:#a6e22e">id</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">NextTrackingID</span>()
	<span style="color:#a6e22e">rs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">RouteSpecification</span>{
		<span style="color:#a6e22e">Origin</span>:          <span style="color:#a6e22e">origin</span>,
		<span style="color:#a6e22e">Destination</span>:     <span style="color:#a6e22e">destination</span>,
		<span style="color:#a6e22e">ArrivalDeadline</span>: <span style="color:#a6e22e">deadline</span>,
	}

	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">NewCargo</span>(<span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">rs</span>)

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">cargos</span>.<span style="color:#a6e22e">Store</span>(<span style="color:#a6e22e">c</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">TrackingID</span>, <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">service</span>) <span style="color:#a6e22e">LoadCargo</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>) (<span style="color:#a6e22e">Cargo</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Cargo</span>{}, <span style="color:#a6e22e">ErrInvalidArgument</span>
	}

	<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">cargos</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">id</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Cargo</span>{}, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">assemble</span>(<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">handlingEvents</span>), <span style="color:#66d9ef">nil</span>
}

<span style="color:#75715e">//...
</span><span style="color:#75715e">// Location is a read model for booking views.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Location</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">UNLocode</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;locode&#34;`</span>
	<span style="color:#a6e22e">Name</span>     <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;name&#34;`</span>
}

<span style="color:#75715e">// Cargo is a read model for booking views.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Cargo</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">ArrivalDeadline</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>      <span style="color:#e6db74">`json:&#34;arrival_deadline&#34;`</span>
	<span style="color:#a6e22e">Destination</span>     <span style="color:#66d9ef">string</span>         <span style="color:#e6db74">`json:&#34;destination&#34;`</span>
	<span style="color:#a6e22e">Legs</span>            []<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Leg</span> <span style="color:#e6db74">`json:&#34;legs,omitempty&#34;`</span>
	<span style="color:#a6e22e">Misrouted</span>       <span style="color:#66d9ef">bool</span>           <span style="color:#e6db74">`json:&#34;misrouted&#34;`</span>
	<span style="color:#a6e22e">Origin</span>          <span style="color:#66d9ef">string</span>         <span style="color:#e6db74">`json:&#34;origin&#34;`</span>
	<span style="color:#a6e22e">Routed</span>          <span style="color:#66d9ef">bool</span>           <span style="color:#e6db74">`json:&#34;routed&#34;`</span>
	<span style="color:#a6e22e">TrackingID</span>      <span style="color:#66d9ef">string</span>         <span style="color:#e6db74">`json:&#34;tracking_id&#34;`</span>
}
</code></pre></div><p>In this example, we have a booking use case that handles the booking of new cargo. Notice how in the constructor we are expressing the repository dependencies as arguments and do no instantiate our implementations. Instead, concrete implementations of these interfaces are passed on to us, injected, in the main package. We also don&rsquo;t pass entities in and out of this layer to the outside, instead, we receive and output DTOs that are specific to this use case. These DTOS are just simple structs with no logic which we transform into and from our internal entities and value objects. We do not cheat and pass out our entities because that would couple them to the needs of the outside world, and we want to shield our innermost layers from change.</p>
<p>Now, where do we put in the framework if we use one? We put them on the outside and include our use cases as dependencies. For example, in our booking cargo use case, we will have HTTP handlers for each method in the service interface.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">bookingHandler</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">s</span> <span style="color:#a6e22e">booking</span>.<span style="color:#a6e22e">Service</span>

	<span style="color:#a6e22e">logger</span> <span style="color:#a6e22e">kitlog</span>.<span style="color:#a6e22e">Logger</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">bookingHandler</span>) <span style="color:#a6e22e">router</span>() <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span> {
	<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">NewRouter</span>()

	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Route</span>(<span style="color:#e6db74">&#34;/cargos&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>) {
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Post</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">bookCargo</span>)
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">listCargos</span>)
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Route</span>(<span style="color:#e6db74">&#34;/{trackingID}&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>) {
			<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">loadCargo</span>)
			<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/request_routes&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">requestRoutes</span>)
			<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Post</span>(<span style="color:#e6db74">&#34;/assign_to_route&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">assignToRoute</span>)
			<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Post</span>(<span style="color:#e6db74">&#34;/change_destination&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">changeDestination</span>)
		})

	})
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/locations&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">listLocations</span>)

	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Method</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;/docs&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StripPrefix</span>(<span style="color:#e6db74">&#34;/booking/v1/docs&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FileServer</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Dir</span>(<span style="color:#e6db74">&#34;booking/docs&#34;</span>))))

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">h</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">bookingHandler</span>) <span style="color:#a6e22e">bookCargo</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>()

	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">request</span> <span style="color:#66d9ef">struct</span> {
		<span style="color:#a6e22e">Origin</span>          <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>
		<span style="color:#a6e22e">Destination</span>     <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">UNLocode</span>
		<span style="color:#a6e22e">ArrivalDeadline</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewDecoder</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Body</span>).<span style="color:#a6e22e">Decode</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">request</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Log</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
		<span style="color:#a6e22e">encodeError</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">w</span>)
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">BookNewCargo</span>(<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">Origin</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">Destination</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">ArrivalDeadline</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">encodeError</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">w</span>)
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">response</span> = <span style="color:#66d9ef">struct</span> {
		<span style="color:#a6e22e">ID</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span> <span style="color:#e6db74">`json:&#34;tracking_id&#34;`</span>
	}{
		<span style="color:#a6e22e">ID</span>: <span style="color:#a6e22e">id</span>,
	}

	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;application/json; charset=utf-8&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewEncoder</span>(<span style="color:#a6e22e">w</span>).<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">response</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Log</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
		<span style="color:#a6e22e">encodeError</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">w</span>)
		<span style="color:#66d9ef">return</span>
	}
}
</code></pre></div><p>In this example, we are using the chi package to implement routing and include our booking service as a dependency. This layer has no application logic and only calls the appropriate methods on our use case, converting the raw data into and from dtos for our use case. When we instantiate our server implementation we pass in the use case implementations as arguments to the constructor.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Server holds the dependencies for a HTTP server.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Server</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Booking</span>  <span style="color:#a6e22e">booking</span>.<span style="color:#a6e22e">Service</span>
	<span style="color:#a6e22e">Tracking</span> <span style="color:#a6e22e">tracking</span>.<span style="color:#a6e22e">Service</span>
	<span style="color:#a6e22e">Handling</span> <span style="color:#a6e22e">handling</span>.<span style="color:#a6e22e">Service</span>

	<span style="color:#a6e22e">Logger</span> <span style="color:#a6e22e">kitlog</span>.<span style="color:#a6e22e">Logger</span>

	<span style="color:#a6e22e">router</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>
}

<span style="color:#75715e">// New returns a new HTTP server.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">bs</span> <span style="color:#a6e22e">booking</span>.<span style="color:#a6e22e">Service</span>, <span style="color:#a6e22e">ts</span> <span style="color:#a6e22e">tracking</span>.<span style="color:#a6e22e">Service</span>, <span style="color:#a6e22e">hs</span> <span style="color:#a6e22e">handling</span>.<span style="color:#a6e22e">Service</span>, <span style="color:#a6e22e">logger</span> <span style="color:#a6e22e">kitlog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Server</span> {
	<span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Server</span>{
		<span style="color:#a6e22e">Booking</span>:  <span style="color:#a6e22e">bs</span>,
		<span style="color:#a6e22e">Tracking</span>: <span style="color:#a6e22e">ts</span>,
		<span style="color:#a6e22e">Handling</span>: <span style="color:#a6e22e">hs</span>,
		<span style="color:#a6e22e">Logger</span>:   <span style="color:#a6e22e">logger</span>,
	}

	<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">NewRouter</span>()

	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Use</span>(<span style="color:#a6e22e">accessControl</span>)

	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Route</span>(<span style="color:#e6db74">&#34;/booking&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>) {
		<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bookingHandler</span>{<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Booking</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Logger</span>}
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Mount</span>(<span style="color:#e6db74">&#34;/v1&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">router</span>())
	})
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Route</span>(<span style="color:#e6db74">&#34;/tracking&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>) {
		<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trackingHandler</span>{<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Tracking</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Logger</span>}
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Mount</span>(<span style="color:#e6db74">&#34;/v1&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">router</span>())
	})
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Route</span>(<span style="color:#e6db74">&#34;/handling&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">r</span> <span style="color:#a6e22e">chi</span>.<span style="color:#a6e22e">Router</span>) {
		<span style="color:#a6e22e">h</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">handlingHandler</span>{<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Handling</span>, <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Logger</span>}
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Mount</span>(<span style="color:#e6db74">&#34;/v1&#34;</span>, <span style="color:#a6e22e">h</span>.<span style="color:#a6e22e">router</span>())
	})

	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Method</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;/metrics&#34;</span>, <span style="color:#a6e22e">promhttp</span>.<span style="color:#a6e22e">Handler</span>())

	<span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">router</span> = <span style="color:#a6e22e">r</span>

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">s</span>
}
</code></pre></div><p>Notice, no logic relating to our use case is here, only logic to satisfy our framework an be a bridge between our use case and the framework. In this way, the core of our application knows nothing about what frameworks we use. It doesn&rsquo;t care at all. The framework could be changed two weeks from now and you wouldn&rsquo;t have to change a thing about the use case because of it. The only time use cases or entities might change is when business requirements change, never for technical reasons.</p>
<p>What about the repositories? Those are an outside-in thing that gets implemented elsewhere. When we choose a persistence technology we simply implement that interface and it gets passed into our use cases upon application startup. Here&rsquo;s a trivial, but important illustration, of an in-memory repository for our Cargo example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Package inmem provides in-memory implementations of all the domain repositories.
</span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">inmem</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;sync&#34;</span>

	<span style="color:#a6e22e">shipping</span> <span style="color:#e6db74">&#34;github.com/marcusolsson/goddd&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">cargoRepository</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">mtx</span>    <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
	<span style="color:#a6e22e">cargos</span> <span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cargoRepository</span>) <span style="color:#a6e22e">Store</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">Lock</span>()
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">Unlock</span>()
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">cargos</span>[<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">TrackingID</span>] = <span style="color:#a6e22e">c</span>
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cargoRepository</span>) <span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">RLock</span>()
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">RUnlock</span>()
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">cargos</span>[<span style="color:#a6e22e">id</span>]; <span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">val</span>, <span style="color:#66d9ef">nil</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">ErrUnknownCargo</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cargoRepository</span>) <span style="color:#a6e22e">FindAll</span>() []<span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span> {
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">RLock</span>()
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">mtx</span>.<span style="color:#a6e22e">RUnlock</span>()
	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> make([]<span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span>, <span style="color:#ae81ff">0</span>, len(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">cargos</span>))
	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">cargos</span> {
		<span style="color:#a6e22e">c</span> = append(<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">val</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">c</span>
}

<span style="color:#75715e">// NewCargoRepository returns a new instance of a in-memory cargo repository.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewCargoRepository</span>() <span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">CargoRepository</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cargoRepository</span>{
		<span style="color:#a6e22e">cargos</span>: make(<span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">TrackingID</span>]<span style="color:#f92672">*</span><span style="color:#a6e22e">shipping</span>.<span style="color:#a6e22e">Cargo</span>),
	}
}
</code></pre></div><p>You can imagine that in a production environment you would implement this using SQL or some NoSQL database and build the entities up from serialized values. The repository implementation is responsible for rebuilding the objects from persistence, the entities don&rsquo;t care as long as they&rsquo;re built correctly.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So what should you take away from all this? That you don&rsquo;t need a framework. That simply applying these principles will get you far and frameworks are just plugins into your application. I recommend that you study these principles and practices more in-depth and stop thinking in terms of frameworks but in terms of your domain. What is it that you&rsquo;re trying to accomplish and build that, don&rsquo;t focus on the tools.</p>
<p>To see the entire code, go to the <a href="https://github.com/marcusolsson/goddd/">GoDDD repository</a> where a complete example of DDD in Go lives.</p>
<p>Also, check out the talks given by Uncle Bob on clean architecture. He&rsquo;s the OG when it comes to clean code and maintainability these days. Fair warning, he does tend to ramble a lot during the beginning of those talks with interesting anecdotes, but they&rsquo;re always fun to watch. He&rsquo;s also written several books you should check out on clean code and architecture.</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=2dKZ-dWaCiU&amp;t=1290s">ITkonekt 2019 | Robert C. Martin (Uncle Bob), Clean Architecture and Design</a></li>
<li><a href="https://www.youtube.com/watch?v=NeXQEJNWO5w">Uncle Bob Martin - The Clean Coder</a></li>
<li><a href="https://www.youtube.com/watch?v=o_TH-Y78tt4">The Principles of Clean Architecture by Uncle Bob Martin</a></li>
<li><a href="https://www.youtube.com/watch?v=Nsjsiz2A9mg">Robert C Martin - Clean Architecture and Design</a></li>
</ul>
<p>Finally, check out the topics of Domain-Driven Design and SOLID. They will change the way you architect your applications, I guarantee it.</p>
]]></content>
        </item>
        
        <item>
            <title>Event Sourcing in Go</title>
            <link>https://victoramartinez.com/posts/event-sourcing-in-go/</link>
            <pubDate>Mon, 23 Mar 2020 21:13:59 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/event-sourcing-in-go/</guid>
            <description>I&amp;rsquo;ve recently gone into doing CQRS with event sourcing along with DDD (Domain Driven Design) principles. I&amp;rsquo;ve been doing it in Go and want to share how I do it.
To begin with, I&amp;rsquo;ve researched this topic thoroughly; I&amp;rsquo;ve probably watched and re-watched hundreds of videos and read many posts, articles, and books on it. I am by no means a cqrs/es expert, but I have gained some insight into how to do it.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve recently gone into doing CQRS with event sourcing along with DDD (Domain Driven Design) principles. I&rsquo;ve been doing it in Go and want to share how I do it.</p>
<p>To begin with, I&rsquo;ve researched this topic thoroughly; I&rsquo;ve probably watched and re-watched hundreds of videos and read many posts, articles, and books on it. I am by no means a cqrs/es expert, but I have gained some insight into how to do it. The first thing I want to put out there is that you don&rsquo;t need a framework to do this. Ddd and cqrs/es are best done without a framework getting in the way and instead you should create a <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> where the framework you choose later on becomes a sort of plugin into your application.</p>
<p>So what is &ldquo;event sourcing&rdquo;? Simply put, event sourcing is a pattern by which the current state is derived from previous facts (events). That is to say, to get the current state of an object you replay all the events of an object in memory to rebuild it from the actions you took previously. And you must accept these previous actions as fact, that is they already happened and you can&rsquo;t change it. You can change your mind about what a fact means to you in the future, but you can&rsquo;t change the fact or that it happened. New events are emitted when new actions are taken and that gets saved into the event store. The only unit of persistence in an event-sourced application is the events, everything else is a projection of those events or more correctly a cache.</p>
<p>Events are emitted by aggregates who are composed of one or more entities. The repository for those aggregates is responsible for saving those events into the event store.</p>
<p>Where do these events come from? They come from the initial design of the system through various exercises such as event storming, a process by which the overall process or sub-process of an application is discovered and modeled as events that have happened. Keep in mind, these aren&rsquo;t fine-grained low-level events like you might be used to in GUI programming, such as a user clicked event, they&rsquo;re more coarse than that. Take the example of a system that deals with hospital admissions of a patient, let us model the interactions the patient has in the system with events. A patient might first be admitted into the hospital, we might say we have a &ldquo;Patient Admitted&rdquo; event; notice the past perfect tense. Later on, when a patient is transferred to another ward we say that we have a &ldquo;Patient Transferred&rdquo; event. Finally, when a patient gets discharged we have &ldquo;Patient Discharged&rdquo;. These events arose out of the need to describe what has happened to a patient.</p>
<p>These events are created through the use of commands in the command query responsibility segregation pattern. Commands signify intent that an action should be taken, but with no guarantee that they will. A command handler can reject commands and produce no events. There are many ways to model commands in a system. They can be as simple as imperative methods that tell an object what to do or as DTOs that have the data in them needed to carry out the command. In my case, I chose to make it as simple as a method on an object.</p>
<p>So with all this, what does it all look like in Go? To begin let&rsquo;s look at what an event might look like in Go. Let&rsquo;s use our patient example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">patient</span>

<span style="color:#75715e">// Event is a domain event marker.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Event</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">isEvent</span>()
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">PatientAdmitted</span>) <span style="color:#a6e22e">isEvent</span>()    {}
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">PatientTransferred</span>) <span style="color:#a6e22e">isEvent</span>() {}
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">e</span> <span style="color:#a6e22e">PatientDischarged</span>) <span style="color:#a6e22e">isEvent</span>() {}

<span style="color:#75715e">// PatientAdmitted event.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PatientAdmitted</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">ID</span>   <span style="color:#a6e22e">ID</span>         <span style="color:#e6db74">`json:&#34;id&#34;`</span>
	<span style="color:#a6e22e">Name</span> <span style="color:#a6e22e">Name</span>       <span style="color:#e6db74">`json:&#34;name&#34;`</span>
	<span style="color:#a6e22e">Ward</span> <span style="color:#a6e22e">WardNumber</span> <span style="color:#e6db74">`json:&#34;ward&#34;`</span>
	<span style="color:#a6e22e">Age</span>  <span style="color:#a6e22e">Age</span>        <span style="color:#e6db74">`json:&#34;age&#34;`</span>
}

<span style="color:#75715e">// PatientTransferred event.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PatientTransferred</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">ID</span>            <span style="color:#a6e22e">ID</span>         <span style="color:#e6db74">`json:&#34;id&#34;`</span>
	<span style="color:#a6e22e">NewWardNumber</span> <span style="color:#a6e22e">WardNumber</span> <span style="color:#e6db74">`json:&#34;new_ward&#34;`</span>
}

<span style="color:#75715e">// PatientDischarged event.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PatientDischarged</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">ID</span> <span style="color:#a6e22e">ID</span> <span style="color:#e6db74">`json:&#34;id&#34;`</span>
}
</code></pre></div><p>Notice how the events are simply going structs which reference the id of the aggregate they&rsquo;re related to. There is also a marker interface that is implemented by them by way of a single un-exported method; this is to prevent outside structs from being flagged as possible events from this package and also to limit the scope of what counts as an event for this application.</p>
<p>Next, we turn to our aggregate, which looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">patient</span>

<span style="color:#75715e">// Patient aggregate.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Patient</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">id</span>         <span style="color:#a6e22e">ID</span>
	<span style="color:#a6e22e">ward</span>       <span style="color:#a6e22e">WardNumber</span>
	<span style="color:#a6e22e">name</span>       <span style="color:#a6e22e">Name</span>
	<span style="color:#a6e22e">age</span>        <span style="color:#a6e22e">Age</span>
	<span style="color:#a6e22e">discharged</span> <span style="color:#66d9ef">bool</span>

	<span style="color:#a6e22e">changes</span> []<span style="color:#a6e22e">Event</span>
	<span style="color:#a6e22e">version</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#75715e">// NewFromEvents is a helper method that creates a new patient
</span><span style="color:#75715e">// from a series of events.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewFromEvents</span>(<span style="color:#a6e22e">events</span> []<span style="color:#a6e22e">Event</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span> {
	<span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Patient</span>{}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">events</span> {
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span>, <span style="color:#66d9ef">false</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>
}

<span style="color:#75715e">// Ward returns the patient&#39;s ward number.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Ward</span>() <span style="color:#a6e22e">WardNumber</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ward</span>
}

<span style="color:#75715e">// Name returns the patient&#39;s name.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Name</span>() <span style="color:#a6e22e">Name</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">name</span>
}

<span style="color:#75715e">// Age returns the patient&#39;s age.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Age</span>() <span style="color:#a6e22e">Age</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">age</span>
}

<span style="color:#75715e">// Discharged returns wether or not the patient has been discharged.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Discharged</span>() <span style="color:#66d9ef">bool</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span>
}

<span style="color:#75715e">// ID returns the id of the patient. Duh.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">ID</span>() <span style="color:#a6e22e">ID</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span>
}

<span style="color:#75715e">// New creates a new Patient from id, name, age and ward number.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">name</span> <span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">age</span> <span style="color:#a6e22e">Age</span>, <span style="color:#a6e22e">ward</span> <span style="color:#a6e22e">WardNumber</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span> {
	<span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Patient</span>{}

	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">raise</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">PatientAdmitted</span>{
		<span style="color:#a6e22e">ID</span>:   <span style="color:#a6e22e">id</span>,
		<span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">name</span>,
		<span style="color:#a6e22e">Age</span>:  <span style="color:#a6e22e">age</span>,
		<span style="color:#a6e22e">Ward</span>: <span style="color:#a6e22e">ward</span>,
	})

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>
}

<span style="color:#75715e">// Transfer transfers a patient to a new ward.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Transfer</span>(<span style="color:#a6e22e">newWard</span> <span style="color:#a6e22e">WardNumber</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ErrPatientDischarged</span>
	}

	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">raise</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">PatientTransferred</span>{
		<span style="color:#a6e22e">ID</span>:            <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span>,
		<span style="color:#a6e22e">NewWardNumber</span>: <span style="color:#a6e22e">newWard</span>,
	})

	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}

<span style="color:#75715e">// Discharge discharges a patient
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Discharge</span>() <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ErrPatientDischarged</span>
	}

	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">raise</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">PatientDischarged</span>{
		<span style="color:#a6e22e">ID</span>: <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span>,
	})

	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}

<span style="color:#75715e">// On handles patient events on the patient aggregate.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">Event</span>, <span style="color:#a6e22e">new</span> <span style="color:#66d9ef">bool</span>) {
	<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">event</span>.(<span style="color:#66d9ef">type</span>) {
	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientAdmitted</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">ID</span>
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">age</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Age</span>
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ward</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Ward</span>

	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientDischarged</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span> = <span style="color:#66d9ef">true</span>

	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientTransferred</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ward</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">NewWardNumber</span>

	}

	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">new</span> {
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">version</span><span style="color:#f92672">++</span>
	}
}

<span style="color:#75715e">// Events returns the uncommitted events from the patient aggregate.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Events</span>() []<span style="color:#a6e22e">Event</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">changes</span>
}

<span style="color:#75715e">// Version returns the last version of the aggregate before changes.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Version</span>() <span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">version</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">raise</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">Event</span>) {
	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">changes</span> = append(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">changes</span>, <span style="color:#a6e22e">event</span>)
	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span>, <span style="color:#66d9ef">true</span>)
}
</code></pre></div><p>You&rsquo;ll notice a few things. First, the use of private fields in the aggregate is to protect our invariants. Then you&rsquo;ll notice that each method that raises an event does not change state directly, but instead raises an event first and that gets handled by the aggregate&rsquo;s <code>On</code> method. The <code>On</code> method is in charge of rebuilding the state from an event. It does a type switch on the event and caries out the behavior accordingly. Let&rsquo;s look at a single method closely.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Transfer transfers a patient to a new ward.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">Transfer</span>(<span style="color:#a6e22e">newWard</span> <span style="color:#a6e22e">WardNumber</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ErrPatientDischarged</span>
	}

	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">raise</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">PatientTransferred</span>{
		<span style="color:#a6e22e">ID</span>:            <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span>,
		<span style="color:#a6e22e">NewWardNumber</span>: <span style="color:#a6e22e">newWard</span>,
	})

	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>Notice how the <code>Transfer</code> method first checks if the patient has already been discharged before emitting the event. We first have to check the business rules are satisfied before emitting the appropriate event, otherwise, we reject the command and return an error. If all is well, we simply raise the event which gets handled by the <code>On</code> method and we return nil. We do not change state unless all of the conditions are satisfied.</p>
<p>Let&rsquo;s look at the <code>On</code> and <code>raise</code> methods more closely.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// On handles patient events on the patient aggregate.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">Event</span>, <span style="color:#a6e22e">new</span> <span style="color:#66d9ef">bool</span>) {
	<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">event</span>.(<span style="color:#66d9ef">type</span>) {
	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientAdmitted</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">id</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">ID</span>
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">age</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Age</span>
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ward</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Ward</span>

	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientDischarged</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">discharged</span> = <span style="color:#66d9ef">true</span>

	<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PatientTransferred</span>:
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ward</span> = <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">NewWardNumber</span>

	}

	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">new</span> {
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">version</span><span style="color:#f92672">++</span>
	}
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span>) <span style="color:#a6e22e">raise</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">Event</span>) {
	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">changes</span> = append(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">changes</span>, <span style="color:#a6e22e">event</span>)
	<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span>, <span style="color:#66d9ef">true</span>)
}
</code></pre></div><p>Notice, the On method first does a type switch on the event and selects the case for each event type. This is where state change happens. Once an event is emitted and saved we do not throw an error, we simply process the event and carry on. We can change here if we decide that an event is no longer relevant or if it means something different, but we can&rsquo;t return an error and say an event is invalid. Then we check if this is a new event if it isn&rsquo;t we increment the version number of our aggregate. The <code>raise</code> method does two things, it appends the event into our changes slice and calls the event handler <code>On</code> saying that this is a new event and we should not increment the version number. Wait, what&rsquo;s this about the version? The version is an optimistic concurrency pattern used to help us avoid database locks to change our aggregate.</p>
<p>So let&rsquo;s look at how we might use this aggregate. First, we have a repository that saves and retrieves the aggregate from the event store and we also have a service that represents a particular use case.</p>
<p>One method on the service might look like this. We first load up the aggregate by replaying the events, we execute the command and save it to the repository. Simple, no?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">service</span>) <span style="color:#a6e22e">TransferPatient</span>(
	<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>,
	<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">ID</span>,
	<span style="color:#a6e22e">newWard</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">WardNumber</span>,
) <span style="color:#66d9ef">error</span> {
	<span style="color:#a6e22e">p</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">Load</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">id</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Transfer</span>(<span style="color:#a6e22e">newWard</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">repo</span>.<span style="color:#a6e22e">Save</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">p</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>Well, things aren&rsquo;t so simple for our repository implementation. Here, I&rsquo;ve come up with a way to save them to dynamodb using some helper libraries from a project called <a href="https://github.com/altairsix/eventsource">eventsource</a> by using embedded structs to serialize and deserialize the event objects to and from JSON. (The LINQ like syntax comes from a library called <a href="https://github.com/ahmetb/go-linq">go-linq</a>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">repository</span>) <span style="color:#a6e22e">Load</span>(
	<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>,
	<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">ID</span>,
) (<span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Patient</span>, <span style="color:#66d9ef">error</span>) {
    <span style="color:#75715e">// load up all events
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">records</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">Load</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>(), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#a6e22e">events</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span>{}
	<span style="color:#a6e22e">linq</span>.<span style="color:#a6e22e">From</span>(<span style="color:#a6e22e">records</span>).
		<span style="color:#a6e22e">SelectT</span>(<span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">record</span> <span style="color:#a6e22e">eventsource</span>.<span style="color:#a6e22e">Record</span>) <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span> {
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
			}

			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">typed</span> <span style="color:#66d9ef">struct</span> {
				<span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;event_type&#34;`</span>
			}
			<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">record</span>.<span style="color:#a6e22e">Data</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">typed</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
			}

			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span>
			<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> {
			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">eventName</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientAdmitted</span>{}):
				<span style="color:#a6e22e">e</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientAdmitted</span>{}
			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">eventName</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientTransferred</span>{}):
				<span style="color:#a6e22e">e</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientTransferred</span>{}
			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">eventName</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientDischarged</span>{}):
				<span style="color:#a6e22e">e</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientDischarged</span>{}
			}

			<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">record</span>.<span style="color:#a6e22e">Data</span>, <span style="color:#a6e22e">e</span>)
			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
				<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
			}

			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">e</span>
		}).
		<span style="color:#a6e22e">ToSlice</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">events</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">NewFromEvents</span>(<span style="color:#a6e22e">events</span>), <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">repository</span>) <span style="color:#a6e22e">Save</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Patient</span>) <span style="color:#66d9ef">error</span> {
	<span style="color:#a6e22e">records</span> <span style="color:#f92672">:=</span> make([]<span style="color:#a6e22e">eventsource</span>.<span style="color:#a6e22e">Record</span>, len(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Events</span>()))

	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">linq</span>.<span style="color:#a6e22e">From</span>(<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Events</span>()).
		<span style="color:#a6e22e">SelectT</span>(<span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span>) <span style="color:#a6e22e">eventsource</span>.<span style="color:#a6e22e">Record</span> {
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data</span> []<span style="color:#66d9ef">byte</span>
			<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">event</span>.(<span style="color:#66d9ef">type</span>) {
			<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientAdmitted</span>:
				<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">admitted</span>{
					<span style="color:#a6e22e">Type</span>:           <span style="color:#a6e22e">eventName</span>(<span style="color:#a6e22e">e</span>),
					<span style="color:#a6e22e">PatientAdmitted</span>: <span style="color:#a6e22e">e</span>,
				})
			<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientDischarged</span>:
				<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">discharged</span>{
					<span style="color:#a6e22e">Type</span>:              <span style="color:#a6e22e">eventName</span>(<span style="color:#a6e22e">e</span>),
					<span style="color:#a6e22e">PatientDischarged</span>: <span style="color:#a6e22e">e</span>,
				})
			<span style="color:#66d9ef">case</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientTransferred</span>:
				<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">transferred</span>{
					<span style="color:#a6e22e">Type</span>:              <span style="color:#a6e22e">eventName</span>(<span style="color:#a6e22e">e</span>),
					<span style="color:#a6e22e">PatientTransferred</span>: <span style="color:#a6e22e">e</span>,
				})
			}
			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">eventsource</span>.<span style="color:#a6e22e">Record</span>{
				<span style="color:#a6e22e">Data</span>: <span style="color:#a6e22e">data</span>,
			}
		}).
		<span style="color:#a6e22e">ToSlice</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">records</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
	}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">records</span> {
		<span style="color:#a6e22e">expectedVersion</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Version</span>()
		<span style="color:#a6e22e">records</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Version</span> = <span style="color:#a6e22e">expectedVersion</span>
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">Save</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">ID</span>().<span style="color:#a6e22e">String</span>(), <span style="color:#a6e22e">records</span><span style="color:#f92672">...</span>)
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">admitted</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;event_type&#34;`</span>
	<span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientAdmited</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">transferred</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;event_type&#34;`</span>
	<span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientTransferred</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">discharged</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;event_type&#34;`</span>
	<span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">PatientDischarged</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eventName</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#a6e22e">event</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Kind</span>() <span style="color:#f92672">==</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">Ptr</span> {
		<span style="color:#a6e22e">t</span> = <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Elem</span>()
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Name</span>()
}
</code></pre></div><p>In the <code>Save</code> method, you&rsquo;ll notice we extract the events from the aggregate, convert them to JSON and give them a version number, starting from the last version the aggregate was at. The version number is important for optimistic concurrency as we check before we save that there are no events with those versions before we save. If there are, we&rsquo;ve been beaten by another command handler and need to reject, because we are stale.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">records</span> {
		<span style="color:#a6e22e">expectedVersion</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">Version</span>()
		<span style="color:#a6e22e">records</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">Version</span> = <span style="color:#a6e22e">expectedVersion</span>
	}
</code></pre></div><p>When we load up the aggregate, we first load up all events in order and replay them back into the aggregate.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">repository</span>) <span style="color:#a6e22e">Load</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">id</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">ID</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Patient</span>, <span style="color:#66d9ef">error</span>) {
     <span style="color:#75715e">// load up all events
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">records</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">Load</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">String</span>(), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}

	<span style="color:#a6e22e">events</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span>{}
	<span style="color:#a6e22e">linq</span>.<span style="color:#a6e22e">From</span>(<span style="color:#a6e22e">records</span>).
		<span style="color:#a6e22e">SelectT</span>(<span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">record</span> <span style="color:#a6e22e">eventsource</span>.<span style="color:#a6e22e">Record</span>) <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">Event</span> {
            <span style="color:#75715e">// convert from record to domain event...
</span><span style="color:#75715e"></span>		}).
		<span style="color:#a6e22e">ToSlice</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">events</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}

    <span style="color:#75715e">// Replay the events
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">patient</span>.<span style="color:#a6e22e">NewFromEvents</span>(<span style="color:#a6e22e">events</span>), <span style="color:#66d9ef">nil</span> 
}
</code></pre></div><p>In the aggregate&rsquo;s package, I&rsquo;ve chosen to have a helper method that replays all events for us.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// NewFromEvents is a helper method that creates a new patient
</span><span style="color:#75715e">// from a series of events.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewFromEvents</span>(<span style="color:#a6e22e">events</span> []<span style="color:#a6e22e">Event</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">Patient</span> {
	<span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Patient</span>{}

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">events</span> {
		<span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">On</span>(<span style="color:#a6e22e">event</span>, <span style="color:#66d9ef">false</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p</span>
}
</code></pre></div><p>All this does is call our <code>On</code> method by passing false to the new flag.</p>
<p>With all that we now have an event sourced aggregate in Go. We didn&rsquo;t need a framework to do this, the go standard library was enough and I think you can figure out how to change or add what you need in the future.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Should you use event sourcing? That depends on your project and if the added complexity of adding event sourcing is warranted. I will say, that most simple applications don&rsquo;t, but that many will have some breakthroughs by applying this pattern. Let me hear your thoughts on this pattern. I&rsquo;ve seen incredible success with this pattern, especially in systems of various microservices where another microservice and get notifications of things that have happened in another by just reading the event stream of another service instead of asking them directly. So I see this going a lot of places and think I&rsquo;ll be doing this more in the future.</p>
]]></content>
        </item>
        
        <item>
            <title>What I&#39;ve Learned Working in a Large Software Project</title>
            <link>https://victoramartinez.com/posts/learnings-working-large-software-project/</link>
            <pubDate>Thu, 28 Nov 2019 20:46:11 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/learnings-working-large-software-project/</guid>
            <description>I&amp;rsquo;ve been working my first large software project for almost a year now and I&amp;rsquo;d like to share my learnings from this project. The things I&amp;rsquo;ve learned, discovered, and realized during this time might be interesting to some, might be old news to others, and might even shed some light on how certain things are done in certain types of projects, but all in all I hope this proves to be an interesting read.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been working my first large software project for almost a year now and I&rsquo;d like to share my learnings from this project. The things I&rsquo;ve learned, discovered, and realized during this time might be interesting to some, might be old news to others, and might even shed some light on how certain things are done in certain types of projects, but all in all I hope this proves to be an interesting read.</p>
<p>First things first, where have I been working? I&rsquo;m currently a software developer at the <a href="https://suri.hacienda.pr.gov">SURI</a> project, the current largest government software project for the Puerto Rico government under the arm of the Treasury Department, also known as Hacienda. This is the software that is going to handle all the new tax related activities for the treasury and is already being used for corporate tax returns, import declarations, and other tax activities. Next year the plan is to rollout the individual tax returns. We already handle individuals in the system, but only show informative and W2s and not their tax returns yet. I&rsquo;m here as a contractor on behalf of my employer.</p>
<p>Here are some of the things I&rsquo;ve learned while working here and some of the things I&rsquo;ve discovered when comparing to other jobs, positions, and projects I&rsquo;ve been in or have compared to.</p>
<h2 id="automated-deploys">Automated Deploys</h2>
<p>Once you&rsquo;re done developing and testing your components in a large project like this, it is very important that you have a setup a reliable automated deployment framework. In the SURI project we have such a system that&rsquo;s setup by Fast Enterprises FCR product. Once final testing in done we create a migration script using the internal tools that takes all the component over to the production environment. The same goes for our testing and staging environments. I don&rsquo;t think we could be as productive as we are without this. Having to manually move things around is a pain and having an automated system to this is really quite helpful. Now, our teams have specific times of day and during the week when things are deployed. Deployment to the testing and staging environment happen every four hours or so on a schedule and production happens at the end of day every day for urgent items and every Wednesday for everything else. One thing to note tho, in our system we still choose which components or configuration to move manually. It&rsquo;s something that I personally dislike, at least in terms of components, but it works well and I can see the advantages of this method. I&rsquo;d personally like to see truly automated deploys to the testing and staging environments,but that would require an additional and I believe necessary change in order to this effectively. Which brings me to the following&hellip;</p>
<h2 id="testing-and-the-meat-cloud">Testing and The Meat Cloud</h2>
<p>In SURI, being a government project, there&rsquo;s a lot of people involved. Almost of a quarter of those people are testers. These testers do&hellip; well exactly what you&rsquo;d think they do, they test the software. The way we test in SURI is that developers write manual test scenarios once we&rsquo;re done with development and then the scenarios are assigned out to testers. This way of testing while necessary at some point, like in QA, just doesn&rsquo;t sit well with me for several reasons. First reason being that these testers are human and humans forget things or don&rsquo;t always do things in a reproducible manner. Now granted, we have some great testers in the team and they do an amazing job, but I think that for many of the tests we do we could do a lot better. These testers are also a phenomenon I like to call the meat cloud. The meat cloud is just a bunch of people you hire to do certain tasks instead of doing them with computers. I don&rsquo;t dislike the meat cloud, it&rsquo;s definitely something that&rsquo;s okay for instances where the automation is not there yet, but in the instance of testing and especially unit testing, we could do better.</p>
<p>Automated unit testing in a project of this size would not only be beneficial, but I&rsquo;d argue necessary to ensure a level of quality and productivity that is required. The kind of software we write here is something that I would consider a great fit for automated testing and even TDD. As and example, most of the components deal with processing returns, flat files, and simple business rules, many of which are perfect candidates for automated unit testing of the &ldquo;given x then y expect z&rdquo; nature. One of the types of components our framework uses is called a Document, this document has a very simple structure, it&rsquo;s just a bunch of fields with excel-like rules and functions. These fields simply take input and produce certain output and validate that input against a simple set of rules. One could easily test these using automated unit tests as it would just be a matter of giving it certain input and expecting a certain output or end state. For the other types of components, what we in SURI call the business objects, testing would not be as simple, but still would of a similar nature. Many of the business objects could be tested using similar unit testing techniques including BDD techniques. The advantage of such a method of automated testing would be that 1. the code and way of usage would be self documenting as the tests would be the design or be heavily influenced by the design and requirements, 2. you would be made aware quickly of any breaking changes you&rsquo;ve introduced while fixing the software or adding new features, and 3. if you had a set of dependable, automated, and clear unit tests in a test suite, you could be more confident in your ability to deploy code that works well and has the least amount of bugs. But what if you miss something? What if you forget to test a specific scenario? Well, you can always just add the test later on. Wouldn&rsquo;t you then need tests for the tests? First of all, no, ideally your tests are small and concise and need no tests for themselves as they are very small. Secondly this is very common rebuttal to unit testing and TDD, or at the very least misconception, but it&rsquo;s totally false.</p>
<p>So why else have automated testing, well that ties in to the first thing I mentioned. Which is that it allows for better more reliable automated deploys. It only takes the system to test before it deploys to choose which components go up. I don&rsquo;t know about you, but if I have to do one less thing at work that isn&rsquo;t related to developing I think that&rsquo;s a win-win. Because again, as a human, I can miss things, having this would make sure I miss less things.</p>
<h2 id="the-importance-of-code-review">The Importance of Code Review</h2>
<p>One of the old adages of software development is that the more eyes on a project, the more bugs are found and eliminated, and the better the software becomes overall. This still holds true and will continue to be. This why code review is so important and in SURI this is no exception. Once we&rsquo;ve finished our work in progress tasks se send it off to be code reviewed by one of the team leads. These leads, having work on the project for a longer time or been involved with it&rsquo;s initial development, review the code (duh) and give the go-ahead for testing, migration, and finally deployment to production. They&rsquo;re job in this role is to make sure that we haven&rsquo;t miss anything important and to suggest better fixes, better ways of doing things, and that our code and changes are in line with the standards we use throughout the project. This is a step that is necessary in all software projects after a certain size, and I would argue that if you&rsquo;re team gets bigger than one, then you need code review in your pipeline.</p>
<p>Previously I&rsquo;ve worked in projects that haven&rsquo;t had code reviews and they suffered in quality as a result. The lack of useful eyes on a piece of software leads to often software that lacks in many things, most of all in quality.</p>
<h2 id="databases-and-data-duplication">Databases and Data Duplication</h2>
<p>Data duplication is okay. Let me say that again, duplicating data is okay. Not only is it okay, it is often necessary for software to be responsive and to offer a good user experience. We duplicate data all the time in our systems and it&rsquo;s myth that you should not duplicate data at all. You&rsquo;d often read in common database class textbooks and lectures that one of the reasons we use databases is to eliminate data duplication and that we should avoid it. While that is good advice for some, it is absolutely the worst piece of advice for big systems. Often one place where we duplicate data is when we want to provide different types of queries or we want faster queries, so we duplicate the data in the format we&rsquo;re going to query it, effectively denormalizing the data. This is okay, because it&rsquo;s a tradeoff we make to ensure the system is fast. One thing should be clear, tho, the flow of data is still one way. Data is only written in one way and everything else trickles down from that flow. When a return document is submitted for example, only one system in charge of processing that return, once that return is processed events are triggered that might take that return document and do several things with it, like mapping certain fields to a denormalized table, create transactions off of it, produce letters, etc. This process gets triggered all over again when a new version is crated such as with and amendment, so even tho we duplicate data, the data is eventually always consistent because we do not modify the duplicated data, instead it is derived from the original source.</p>
<p>What does this give us? Well let&rsquo;s say you need to figure out how many people issued a return for more than $200,000 in business volume, with this setup you could just have a mapping table for the fields you&rsquo;re interested in that gets updated whenever the document changes and you&rsquo;d query that for your report, the alternative would be to open each and every document, load it into memory, and you can see how complicated and constraining it will get. Think if it as recalculating the results in a way.</p>
<p>So you can see that duplicating the data isn&rsquo;t such a big problem. Sure you will end up in scenarios where the data is updated, but this is mitigated against by having only one place that is in charge of changing it and therefore you isolate that transaction there.</p>
<h2 id="business">Business</h2>
<p>More than anything we write software for people, and that&rsquo;s even more true in the case of SURI. It is important then to have a good relationship with the people familiar with the business, because they have all the expert knowledge you need to write the software for the people who will eventually use it. When you write software, you&rsquo;re writing for people and the business. The real job of a programmer is to solve problems using a computer, the computer part is secondary to the job. What tools you use, how you do it, and all that other stuff is important, but not more important than solving the problems of the business. We&rsquo;re engineers of a different breed, ones that work with logic, switches, instructions, and processes, instead of with cogs, gears, bridges, or cement, but in the end we all build for people.</p>
<p>The way we interact with the business in the SURI project is very interesting. On site we have several people who manage the project who are experts in specific areas, such as corporate returns and declarations, audits, levies, etc. These experts give us specifications for new features, bug fixes, and new versions of existing features. The way it works is that they raise new issue (we call them SQRs) with descriptions of what needs to be done. Sometimes their descriptions are accurate enough to be able to do the work without asking them for further clarification, but often we seek them out in a short face to face meeting to get a better picture of the issue to be solved in their words, and our jobs is to translate that into code or fixes to the software. Without these people, we would literally have no job.</p>
<h2 id="conclusions">Conclusions</h2>
<p>So I&rsquo;ve learned a lot while working here and it&rsquo;s only been about a year (maybe more by the time you read this), and a lot of it has been very valuable to my future development in my career. I consider that I&rsquo;ll be more valuable after exiting this project and I think you&rsquo;d agree. Anyways, I really don&rsquo;t know how to end this blog post other than maybe asking what you might have learned during your current job or better yet your first job experience in a big project. I&rsquo;m also open to any questions or further clarification about what I&rsquo;ve written up here. This is in no way meant as a rant or as a critique, as in a bad review, of my current position, but as an observation of what I&rsquo;ve been doing and learning over the past year. So with that, let me know what you think and I look forward to writing the next one.</p>
]]></content>
        </item>
        
        <item>
            <title>WTF is Blockchain?</title>
            <link>https://victoramartinez.com/posts/wtf-is-blockchain/</link>
            <pubDate>Tue, 07 Aug 2018 19:44:17 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/wtf-is-blockchain/</guid>
            <description>This post was inspired by a talk given by Jared Haight from Microsoft at BSidesPR. Jared talked about giving back to the InfoSec community at a large, and he mentioned things to write about, including Blockchain. Specifically, he asked &amp;ldquo;WTF is Blockchain?&amp;rdquo; and said it that if you actually title it like that, he&amp;rsquo;d read it. So, this is my attempt at writing that description.
TLDR: Blockchain is an unchangeable series of blocks that each reference the previous&#39; block&amp;rsquo;s contents via a hash of that content.</description>
            <content type="html"><![CDATA[<p>This post was inspired by a talk given by Jared Haight from Microsoft at <a href="http://bsidespr.org/2017/">BSidesPR</a>. Jared talked about giving back to the InfoSec community at a large, and he mentioned things to write about, including Blockchain. Specifically, he asked &ldquo;WTF is Blockchain?&rdquo; and said it that if you actually title it like that, he&rsquo;d read it. So, this is my attempt at writing that description.</p>
<h4 id="tldr-blockchain-is-an-unchangeable-series-of-blocks-that-each-reference-the-previous-blocks-contents-via-a-hash-of-that-content-blocks-are-a-collection-of-transactions-that-have-been-grouped-together-by-miners">TLDR: Blockchain is an unchangeable series of blocks that each reference the previous' block&rsquo;s contents via a hash of that content. Blocks are a collection of transactions that have been grouped together by miners.</h4>
<h1 id="basic-computer-science">Basic Computer Science</h1>
<p>To really understand blockchain techonlogy you must first understand a few computer science concepts. Don&rsquo;t worry, I wont bore you with the details.</p>
<h2 id="linked-lists-and-merkle-trees">Linked Lists and Merkle Trees</h2>
<p>At the heart of blockchain is the concept of Linked Lists and Merkle Trees. A linked list consists of many simple datastructure elements that contain of a value and a pointer. The pointer &ldquo;points&rdquo; to another element in the linked list, usually the next one in the list. Linked List elements can point to the next or the previous element or both.</p>
<p><img src="https://steemitimages.com/DQmQRFECQN5yQNGRmwh2yEBHUGiHgVPNKmr8kbJRCYTT5jY/single-list.png" alt="Linked List"></p>
<p>Simple enough, right? All you really need to know is that Linked Lists are a collection of elements that each point to the next element or the previous.</p>
<p>A Merkle Tree is similar in construction to a Linked List except that each element has two children instead of a previous and next element. This datastructure is used to construct hashes out of smaller hashes. A hash is a cryptographic number that is used to identify some arbitrary data. A Merkle Tree is useful because you can send someone the complete hash and the sub hashes and then verify yourself that the complete hash can be built out of the subhashes. This adds security without trust.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Hash_Tree.svg/1200px-Hash_Tree.svg.png" alt="Merkle Tree"></p>
<p>Each subhash is built out of distinct data blocks. In many blockchain implementations the hashes are usually SHA 256 or above.</p>
<h1 id="blockchain-a-chain-of-blocks-and-proof-of-work">Blockchain: A chain of blocks and proof of work</h1>
<p><img src="https://s3.amazonaws.com/cbi-research-portal-uploads/2017/11/20155651/112017-Blockchain-4-V2.png" alt="Decentralized Ledger">
The basic building block of blockchain (no pun intended) is a Block. A Block is a collection of transactions that need to stored. Along with the transactions the Block usually contains a few more things that make it immutable (i.e. unchangable). These are the hash of the previous block, something called a nonce number, and the hash of the current block. But how does that hash get generated and what makes it immuatable? Well that hash has to include the contents of the block, the nonce number and the hash of the previous block. The hash also has to match a specific pattern which is very hard to find. In order to find that pattern you must keep incrementing the nonce number in order for the hash to become a certain pattern. Once that pattern is found it is said to be the proof of work for that block. A proof of work is one of the ways many blockchains make sure that blocks have not been tampered with, because generating a cryptographic hash matching a certain pattern that uses the contents of a block is very hard to find. Because it is very hard to find it is a great way to even the playing field when it comes to finding that magic number because everyone has a chance to find it. One added security to this is making the pattern harder to find depending on the number of members in the network.</p>
<h1 id="proof-of-work--incentives">Proof of Work:  Incentives!</h1>
<p>We&rsquo;ve discussed why proof of work makes sure that no block has been tampered with and even why it makes it so that everyone finding the number has about as much chance as everyone else to find it. In public blockchains you can give incentive to people in the network finding number by giving them a reward for confirming blocks. In cryptocurrency blockchains Miners get new cryptocurrency units (Bitcoins, Etherium, Doge Coins&hellip;) whenever they mine new blocks. Wait Minners? Mining? Yep, that&rsquo;s what finding that magic number is usually called in the cryptocurrency world. They use minners to create new coins and add to the supply. Minners spend those credits and move it into circulation.</p>
<h1 id="summary">Summary</h1>
<p>I hope this somehow helped you understand a blockchain a little bit more. This is by no means an in depth explination. It&rsquo;s really a TL;DR kind of thing. Nevertheless, I hope you enjoyed it.</p>
]]></content>
        </item>
        
        <item>
            <title>Goro</title>
            <link>https://victoramartinez.com/posts/goro/</link>
            <pubDate>Mon, 21 May 2018 13:36:22 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/goro/</guid>
            <description>I know I haven&amp;rsquo;t posted in a long time, but I finally felt I needed an update in my blog. I&amp;rsquo;ve recently updated some work on my own Go library for EventStore called goro. I made this for my own personal work and my job at ALQMY.
I used to use Go.GetEventStore as my prefered library for working with EventStore. It was nice, but I felt it was lacking in many features and was ultimitely very cumbersome to work with, especially when it comes to reading events in a streaming fashion.</description>
            <content type="html"><![CDATA[<p>I know I haven&rsquo;t posted in a long time, but I finally felt I needed an update in my blog. I&rsquo;ve recently updated some work on my own Go library for <a href="https://eventstore.org">EventStore</a> called <a href="https://github.com/vectorhacker/goro">goro</a>. I made this for my own personal work and my job at <a href="http://alqmy.io">ALQMY</a>.</p>
<p>I used to use <a href="https://github.com/jetbasrawi/go.geteventstore">Go.GetEventStore</a> as my prefered library for working with EventStore. It was nice, but I felt it was lacking in many features and was ultimitely very cumbersome to work with, especially when it comes to reading events in a streaming fashion. I modeled my libary much like the sarama library for Kafka which has a similar api for streaming. On top of that I&rsquo;ve added native support for reading streams, not only forwards, but backwards as well. This to me was a very important feature to have, as sometimes things like inlined snapshots in <a href="https://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a> <a href="https://martinfowler.com/eaaDev/EventSourcing.html">[1]</a><a href="http://microservices.io/patterns/data/event-sourcing.html">[2]</a><a href="https://eventstore.org/docs/event-sourcing-basics/index.html">[3]</a> require that you read a stream backwards.</p>
<p>So I think I should show you how the library actually works. First things first connecting to EventStore is as simple as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">goro</span>.<span style="color:#a6e22e">Connect</span>(
        <span style="color:#e6db74">&#34;http://localhost:2113&#34;</span>, 
        <span style="color:#a6e22e">goro</span>.<span style="color:#a6e22e">WithBasicAuth</span>(<span style="color:#e6db74">&#34;admin&#34;</span>, <span style="color:#e6db74">&#34;changeit&#34;</span>),
    )
</code></pre></div><p>Now here is the first major difference between my library and that of Go.GetEventStore. When you connect, you initially give it the connection options such as authentication. In the future I&rsquo;ll add more options, but each option is implemented via a simple interface:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">ClientOption</span> <span style="color:#66d9ef">func</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">Client</span>)
</code></pre></div><p>This enables me to add options to it arbitrarily. This is very similar to how the <a href="https://github.com/grpc/grpc-go">gRPC-Go</a> libraries add options to connections. In contrast Go.GetEventStore does this for authentication for example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">goes</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#66d9ef">nil</span>, <span style="color:#e6db74">&#34;http://youreventstore:2113&#34;</span>)
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
}

<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">SetBasicAuth</span>(<span style="color:#e6db74">&#34;admin&#34;</span>, <span style="color:#e6db74">&#34;changeit&#34;</span>)
</code></pre></div><p>I find this partial builder pattern kind of confusing and very fragile. Besdies, I&rsquo;m usually very averse to the whole getter/setter pattern in general, but that&rsquo;s a topic for another blog post.</p>
<p>Another big thing I wanted was better streaming. I&rsquo;m a big fan of using Go&rsquo;s channel feature to manage concurrency and to iterate through streaming data. It is very easy to iterate over a channel as if it where an array:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">
<span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">string</span>)

<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">message</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">stream</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">message</span>)
    }
}()

<span style="color:#a6e22e">stream</span> <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;hello&#34;</span>
<span style="color:#a6e22e">stream</span> <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;wow&#34;</span>

close(<span style="color:#a6e22e">stream</span>)
</code></pre></div><p>I think this is very nice, simple, clean, and elegant way of handling concurrency. There&rsquo;s also no risk of the channel giving an error when getting messages in this model because the go for loop automatically breaks when the channel is closed. So in that fashion, I modeled my subscriptions for EventStore in this manner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">goro</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#e6db74">&#34;http://localhost:2113&#34;</span>, <span style="color:#a6e22e">goro</span>.<span style="color:#a6e22e">WithBasicAuth</span>(<span style="color:#e6db74">&#34;admin&#34;</span>, <span style="color:#e6db74">&#34;changeit&#34;</span>))

<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>()
<span style="color:#a6e22e">events</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">catchupSubscription</span>.<span style="color:#a6e22e">Subscribe</span>(<span style="color:#a6e22e">ctx</span>)

<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">events</span> {
    <span style="color:#75715e">//...
</span><span style="color:#75715e"></span>}
</code></pre></div><p>Each stream message has a few things inside it that help you manage the stream. This includes the event, an error, and some acknowledger for when you have persistent subscriptions.</p>
<p>Streaming style subscriptions isn&rsquo;t the only way to read events, you can also read arbitrarily using a reader:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">reader</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">FowardsReader</span>(<span style="color:#e6db74">&#34;messages&#34;</span>)
<span style="color:#a6e22e">events</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reader</span>.<span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    panic(<span style="color:#a6e22e">err</span>)
}
</code></pre></div><p>as you can see, you can specify very easily the direction in which you want to read, this to me was very important.</p>
<h2 id="improvements">Improvements:</h2>
<p>I&rsquo;m still adding things to this library, and I welcome any pull requests that want to add features. A few of the features I want to add are:</p>
<ul>
<li>Support for the <a href="https://eventstore.org/docs/projections/api/index.html">Projections API</a></li>
<li>Support for handling <a href="https://eventstore.org/docs/http-api/swagger/Users.html">users</a>.</li>
</ul>
<p>These should be simple to implement, but I&rsquo;ve been to lazy to build them yet and right now it&rsquo;s not a pressing concern.</p>
]]></content>
        </item>
        
        <item>
            <title>Amazon Key</title>
            <link>https://victoramartinez.com/posts/amazon-key/</link>
            <pubDate>Sun, 26 Nov 2017 23:20:47 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/amazon-key/</guid>
            <description>So Amazon recently announced a new program called Amazon Key. This program would let deliverymen enter the house of people who have purchased the program. I&amp;rsquo;m really uncomfortable with this idea. For one thing, I don&amp;rsquo;t want Amazon, much less any other giant company, controlling entrance to my home. Second, this just feels like a whole new invasion of privacy.
This is just part of a much bigger problem. Silicon Valley companies are becoming so arrogant and negligent, and they&amp;rsquo;re giving me more and more reason to stop trusting them.</description>
            <content type="html"><![CDATA[<p><img src="/images/amazon-key.jpeg" alt="Amazon Key"></p>
<p>So Amazon <a href="https://www.recode.net/2017/10/25/16538828/amazon-key-in-home-delivery-prime-camera-lock">recently announced</a> a new program called <a href="https://en.wikipedia.org/wiki/Amazon_Key">Amazon Key</a>. This program would let deliverymen enter the house of people who have purchased the program. I&rsquo;m really uncomfortable with this idea. For one thing, I don&rsquo;t want Amazon, much less any other giant company, controlling entrance to my home. Second, this just feels like a whole new invasion of privacy.</p>
<p>This is just part of a much bigger problem. Silicon Valley companies are becoming so arrogant and negligent, and they&rsquo;re giving me more and more reason to stop trusting them. Why would Amazon think that I would trust them with the security of my home? I say no.</p>
]]></content>
        </item>
        
        <item>
            <title>Github Pages</title>
            <link>https://victoramartinez.com/posts/github-pages/</link>
            <pubDate>Sun, 26 Nov 2017 01:06:20 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/github-pages/</guid>
            <description>I&amp;rsquo;m hosting this blog using Github pages (because I&amp;rsquo;m cheap.) You can browser through the source code here. I&amp;rsquo;m using Hugo to generate the static site. Overall it&amp;rsquo;s pretty great.</description>
            <content type="html"><![CDATA[<p>I&rsquo;m hosting this blog using Github pages (because I&rsquo;m cheap.) You can browser through the source code <a href="https://github.com/vectorhacker/victoramartinez.com">here</a>. I&rsquo;m using <a href="https://gohugo.io">Hugo</a> to generate the static site. Overall it&rsquo;s pretty great.</p>
]]></content>
        </item>
        
        <item>
            <title>Net Neutrality Opinion</title>
            <link>https://victoramartinez.com/posts/net-neutrality-opinion/</link>
            <pubDate>Sun, 26 Nov 2017 00:44:22 -0400</pubDate>
            
            <guid>https://victoramartinez.com/posts/net-neutrality-opinion/</guid>
            <description>Background This December, the FCC will vote on wether to keep or reverse Title II of the Communications Act of 1934 in regards to ISPs. This decision will affect the way the internet works in the United States and if reversed, would give ISPs incentive to give preferential treatment of some data packets over others, among many other things that they could do. These rules are with the intent of creating a level playing field within the internet and keeping the internet free and open.</description>
            <content type="html"><![CDATA[<p><img src="/images/fight-net.jpg" alt="Fight For Net Neutrality!"></p>
<h3 id="background">Background</h3>
<p>This December, the FCC will vote on wether to keep or reverse <a href="http://transition.fcc.gov/Reports/1934new.pdf">Title II of the Communications Act</a> of 1934 in regards to ISPs. This decision will affect the way the internet works in the United States and if reversed, would give ISPs incentive to give preferential treatment of some data packets over others, among many other things that they could do. These rules are with the intent of creating a level playing field within the internet and keeping the internet free and open.</p>
<p>In a nutshell, Net neutrality simply states that all internet traffic ought to be treated equally and delivered equally. In essence, ISPs  can‚Äôt block, throttle, nor speed up content for companies that pay.</p>
<h3 id="title-ii">Title II</h3>
<p>Title II has to do with what are called ‚Äúcommon carriers‚Äù. These include utilities like water, electricity, and land-line phones. In 2015 the Open n Internet Order made it so that ISPs fall under Title II, before that they were classified under Title I.</p>
<p>Why is this important? Without this classification, the FCC would have no authority to enforce net neutrality rules and would be essentially powerless if an ISP decides to <a href="https://consumerist.com/2014/02/23/netflix-agrees-to-pay-comcast-to-end-slowdown/">throttle your connection to Netflix</a>.</p>
<h3 id="argument-against-title-ii-and-why-theyre-probably-wrong">Argument against Title II and why they‚Äôre probably wrong</h3>
<p>The main argument against Title II is that the regulation hurts ISPs ability to innovate and curbs investment. Wether or not that is true, it‚Äôs really up for debate. The current FCC Chairman Ajit Pai, who voted against the 2015 Open Internet Order said:</p>
<blockquote>
<p><em>‚ÄúThis burdensome regulation has failed consumers and businesses alike. In the two years after the FCC‚Äôs decision, broadband network investment dropped more than 5.6 percent‚Äîthe first time a decline has happened outside of a recession. If the current rules are left in place, millions of Americans who are on the wrong side of the digital divide would have to wait years to get more broadband.‚Äù</em></p>
</blockquote>
<p>There is reason to believe, however, that the net neutrality rules will not hurt ISPs investment. ‚ÄúWe found that not a single publicly traded US ISP ever told its investors (or the SEC) that Title II negatively impacted its own investments specifically‚Äù as said in a <a href="https://www.freepress.net/sites/default/files/resources/internet-access-and-online-video-markets-are-thriving-in-title-II-era.pdf">report issued by the Free Press</a>. Many ISPs have told their investors that <a href="http://www.dslreports.com/shownews/ISPs-Tell-Investors-Title-II-Wont-Hurt-Them-In-The-Slightest-131865">Title II won‚Äôt hurt them in the slightest</a>.  More over, there have been many disputes over the claims made by Pai, and some analysis shows that ISP investment has <a href="https://arstechnica.com/information-technology/2017/05/title-ii-hasnt-hurt-network-investment-according-to-the-isps-themselves/">actually</a> <a href="http://www.cmcsa.com/releasedetail.cfm?ReleaseID=1023210">increased</a> and that it continues. You can read the full report, <a href="https://www.freepress.net/sites/default/files/resources/internet-access-and-online-video-markets-are-thriving-in-title-II-era.pdf">here</a>.</p>
<p>So really it seams that the internet is thriving under Title II.</p>
<h3 id="data-caps">Data caps</h3>
<p>Many ISPs in the United States put in place what are called <a href="https://en.wikipedia.org/wiki/Bandwidth_cap">Data Caps or Bandwidth Caps</a>. These are artificial restrictions on transfer of data over a network. This mechanism is in place to limit customer usage of their services. ISPs assert that these are necessary to provide ‚Äúfair‚Äù service to their users.</p>
<p>According to StopTheCap.com.</p>
<blockquote>
<p>‚Ä¶former FCC chairman Julius Genachowski defended the practice, claiming it would bring lower prices to light users, spur ‚Äúinnovation‚Äù, and enable consumer choice.</p>
</blockquote>
<p>This measure is often criticized as it is becoming increasingly unneeded, mostly because infrastructure is becoming cheaper to buy and maintain in order to increase capacity. There have also been assertions that ISPs who own pay television services keep these caps in order to protect this service.</p>
<p>It is more likely that data caps are in place to maximize ISP profit and not because of the limits of their systems. Comcast, for example, can more than pay for not having <a href="https://www.cio.com/article/3075975/internet-service-providers/what-big-isps-dont-want-you-to-know-about-data-caps.html">limits on data</a>. A <a href="http://www.theverge.com/smart-home/2015/11/7/9687976/comcast-data-caps-are-not-about-fixing-network-congestion">leaked memo</a> from Comcast even went so far as to state that the data caps are not in place because of network performance. Many ISP CEOs have even said that as their costs decrease for maintaining broadband there is really no reason to have them as the days of keeping up with users data usage is basically over. As a St. Louis broadband says companies don‚Äôt have to spend a lot to keep up with customers‚Äô data demands. ‚ÄúThose days are basically over.‚Äù <a href="http://time.com/money/4360431/internet-data-caps-bogus-ploys/">CEOs: Data Caps Are Bogus Ploys to Make Internet Seem Scarce | Money</a></p>
<p>But there‚Äôs hope, some internet companies in the United States are either raising data caps or removing them entirely. And Netflix is <a href="https://www.bloomberg.com/news/articles/2012-06-27/netflix-wants-help-from-u-s-against-cable-data-caps">asking</a> lawmakers to prevent ISPs from putting these caps in place. But it is still an uphill battle, as Comcast and many others keep <a href="https://www.consumerreports.org/telecom-services/how-easy-to-burn-through-1TB-data-cap/">putting these in place</a>.</p>
<h3 id="whats-ahead">What‚Äôs ahead</h3>
<p>If Net Neutrality is reversed, specifically the classification of ISPs under Title II, ISPs would not have much incentive in keeping data service fair. And we‚Äôve already seen that they limit your data usage just to please their needs of profit and/or to protect their other services like paid television. On December the FCC will vote and they can determine the future of the internet for America. Voice your opinion <a href="www.gofccyourself.com">here</a> GoFccYourself.com and make sure to tell them that you want ISPs to stay under Title II.</p>
<h3 id="sources">Sources</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Net_neutrality#EU_and_net_neutrality">https://en.wikipedia.org/wiki/Net_neutrality#EU_and_net_neutrality</a></li>
<li><a href="http://www.dslreports.com/shownews/ISPs-Tell-Investors-Title-II-Wont-Hurt-Them-In-The-Slightest-131865">ISPs Tell Investors Title II Won‚Äôt Hurt Them In The Slightest | DSLReports, ISP Information</a></li>
<li><a href="https://www.freepress.net/sites/default/files/resources/internet-access-and-online-video-markets-are-thriving-in-title-II-era.pdf">https://www.freepress.net/sites/default/files/resources/internet-access-and-online-video-markets-are-thriving-in-title-II-era.pdf</a></li>
<li><a href="https://arstechnica.com/information-technology/2017/05/title-ii-hasnt-hurt-network-investment-according-to-the-isps-themselves/">https://arstechnica.com/information-technology/2017/05/title-ii-hasnt-hurt-network-investment-according-to-the-isps-themselves/</a></li>
<li><a href="https://arstechnica.com/tech-policy/2017/07/verizons-throttling-of-video-should-be-investigated-by-fcc-petition-says/">https://arstechnica.com/tech-policy/2017/07/verizons-throttling-of-video-should-be-investigated-by-fcc-petition-says/</a></li>
<li><a href="https://www.usatoday.com/story/tech/columnist/shinal/2016/03/29/netflix-throttling-shows-net-neutrality-life-support-column/82388890/">https://www.usatoday.com/story/tech/columnist/shinal/2016/03/29/netflix-throttling-shows-net-neutrality-life-support-column/82388890/</a></li>
<li><a href="https://consumerist.com/2014/02/23/netflix-agrees-to-pay-comcast-to-end-slowdown/">https://consumerist.com/2014/02/23/netflix-agrees-to-pay-comcast-to-end-slowdown/</a></li>
<li><a href="https://www.dailydot.com/layer8/what-is-title-ii-net-neutrality-fcc/">https://www.dailydot.com/layer8/what-is-title-ii-net-neutrality-fcc/</a></li>
<li><a href="https://www.consumerreports.org/telecom-services/how-easy-to-burn-through-1TB-data-cap/">https://www.consumerreports.org/telecom-services/how-easy-to-burn-through-1TB-data-cap/</a></li>
<li><a href="https://www.bloomberg.com/news/articles/2016-01-28/comcast-draws-customer-ire-by-putting-netflix-addicts-on-a-meter">https://www.bloomberg.com/news/articles/2016-01-28/comcast-draws-customer-ire-by-putting-netflix-addicts-on-a-meter</a></li>
<li><a href="https://www.bloomberg.com/news/articles/2012-06-27/netflix-wants-help-from-u-s-against-cable-data-caps">https://www.bloomberg.com/news/articles/2012-06-27/netflix-wants-help-from-u-s-against-cable-data-caps</a></li>
<li><a href="https://arstechnica.com/information-technology/2014/05/comcast-plans-data-caps-for-all-customers-in-5-years-could-be-500gb/">https://arstechnica.com/information-technology/2014/05/comcast-plans-data-caps-for-all-customers-in-5-years-could-be-500gb/</a></li>
<li><a href="http://time.com/money/4360431/internet-data-caps-bogus-ploys/">CEOs: Data Caps Are Bogus Ploys to Make Internet Seem Scarce | Money</a></li>
<li><a href="https://www.cio.com/article/3075975/internet-service-providers/what-big-isps-dont-want-you-to-know-about-data-caps.html">What big ISPs don‚Äôt want you to know about data caps | CIO</a></li>
<li><a href="http://money.cnn.com/2015/10/21/technology/unlimited-data/">http://money.cnn.com/2015/10/21/technology/unlimited-data/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bandwidth_cap">https://en.wikipedia.org/wiki/Bandwidth_cap</a></li>
<li><a href="https://www.usatoday.com/story/tech/2012/10/01/internet-data-cap/1595683/">https://www.usatoday.com/story/tech/2012/10/01/internet-data-cap/1595683/</a></li>
<li><a href="http://bgr.com/2015/11/19/comcast-data-cap-2015-bad-for-us-all/">http://bgr.com/2015/11/19/comcast-data-cap-2015-bad-for-us-all/</a></li>
<li><a href="http://www.makeuseof.com/tag/data-caps-exist-can-bypass/">http://www.makeuseof.com/tag/data-caps-exist-can-bypass/</a></li>
<li><a href="http://stopthecap.com/">Stop the Cap! Stop the Cap! ¬∑ Promoting Better Broadband, Fighting Data Caps and Usage-Based Billing</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
